.callgraph {
  width: 100%;
  height: 100%;
  outline: none;

  cursor: default;

  user-select: none;

  & > #graph0 {
    & > polygon:first-of-type {
      fill: var(--background-color);
    }

    & > #faded-group {
      & > :where(.node, .cluster) {
        opacity: 0.2;
      }

      & > .edge {
        opacity: 0.05;
      }
    }
  }

  .edge {
    & > path:not(.hover-path) {
      stroke: var(--edge-color);
      stroke-width: 3;
    }
    & > polygon {
      stroke: var(--edge-color);
      fill: var(--edge-color);
    }
    & > path.hover-path {
      stroke: transparent;
      stroke-width: 15;
    }

    &.impl {
      & > path {
        stroke-dasharray: 8, 3;
      }
      & > polygon {
        stroke-width: 2;
        fill: none !important;
      }
    }

    &:hover {
      --edge-color: #00bcd4;
    }
    &.incoming {
      --edge-color: #698b69;
    }
    &.outgoing {
      --edge-color: #008acd;
    }
    &.incoming.outgoing {
      --edge-color: black;
    }
  }

  .cluster {
    polygon {
      stroke-width: 1.6;
    }

    .cluster-label {
      cursor: pointer;
      fill: var(--cluster-label-bg-color);
      rx: 18px;
    }

    text {
      pointer-events: none;
    }

    &.selected {
      polygon {
        stroke-width: 2.5;
        stroke: red;
      }

      .cluster-label {
        fill: #ff603b;
      }
    }
  }

  .node {
    & > rect {
      rx: 20px;
      fill: var(--node-bg-color);
      filter: url(#shadow);
    }
    &.selected > rect {
      stroke: var(--node-seleted-color);
      stroke-width: 2.25;
    }

    & > .title {
      cursor: pointer;

      & > text {
        font-weight: bold;
      }
    }
  }

  .cell {
    --cell-bg-color: var(--symbol-default-bg-color);
    --cell-border-color: var(--symbol-default-border-color);

    & > rect {
      rx: 10px;
      fill: var(--cell-bg-color);
      stroke: var(--cell-border-color);
      stroke-width: 1.6;
    }
    & > text {
      fill: var(--symbold-default-text-color);
    }

    &.highlight > rect {
      --cell-border-color: blue;
      filter: url(#highlightShadow);
    }
    &.selected:not(.highlight) > rect {
      --cell-border-color: red;
      filter: url(#selectShadow);
    }
    &:not(.highlight):not(.selected):not(:has(> .cell:hover)):hover > rect {
      --cell-border-color: orange;
      filter: url(#hoverShadow);
    }

    /* symbols */

    &.interface {
      --cell-bg-color: var(--interface-bg-color);
      --cell-border-color: var(--interface-border-color);

      & > rect {
        stroke-dasharray: 7, 5;
      }
    }

    &.module {
      --cell-bg-color: var(--module-bg-color);
      --cell-border-color: var(--module-border-color);
    }
    &.constructor {
      --cell-bg-color: var(--constructor-bg-color);
      --cell-border-color: var(--constructor-border-color);
    }
    &.function {
      --cell-bg-color: var(--function-bg-color);
      --cell-border-color: var(--function-border-color);
    }
    &.method {
      --cell-bg-color: var(--method-bg-color);
      --cell-border-color: var(--method-border-color);
    }
    &:where(.class, .struct, .enum) {
      --cell-bg-color: var(--struct-bg-color);
      --cell-border-color: var(--struct-border-color);

      & > rect {
        rx: unset;
      }

      & > text {
        transform: translateY(1px);

        &:first-of-type {
          fill: var(--icon-color);
        }
      }
    }
    &.property {
      & > rect {
        rx: unset;
      }

      & > text:first-of-type {
        font-style: italic;
        fill: var(--icon-color);
      }
    }
  }
}
