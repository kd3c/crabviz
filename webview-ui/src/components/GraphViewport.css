@import "open-props/normalize";

.viewport {
  --background-color: #f5fffa;

  --edge-color: #548f9e;
  --edge-hover-color: #00bcd4;
  --edge-incoming-color: #698b69;
  --edge-outgoing-color: #008acd;
  --edge-recursive-color: black;

  --cell-hover-color: #e0ffff;
  --cell-selected-color: color-mix(in srgb, var(--cell-hover-color), #bce);
  --cell-highlight-color: bisque;

  --node-color: #f4f5f1;
  --node-content-color: black;
  --node-seleted-color: red;

  /* symbols */

  --interface-color: #fff8dc;
  --module-color: #ffebcd;
  --constructor-color: #ffdab9;
  --function-color: #e4ffb5;
  --method-color: #deb887;

  --type-color: #f4f5f1;

  --icon-color: lightcoral;

  width: 100%;
  height: 100%;
  background-color: var(--background-color);

  svg {
    width: 100%;
    height: 100%;
    outline: none;

    cursor: default;

    & > #graph0 > polygon:first-of-type {
      fill: var(--background-color);
    }

    .edge {
      & > path {
        stroke: var(--edge-color);
        stroke-width: 3;
      }
      & > polygon {
        stroke: var(--edge-color);
        fill: var(--edge-color);
      }

      &:hover {
        & > path:not(.hover-path) {
          stroke: var(--edge-hover-color);
        }
        & > polygon {
          stroke: var(--edge-hover-color);
          fill: var(--edge-hover-color);
        }
      }

      & > path.hover-path {
        stroke: transparent;
        stroke-width: 15;
      }

      &.fade {
        opacity: 0.05;
      }

      &.impl {
        & > path {
          stroke-dasharray: 8, 3;
        }
        & > polygon {
          stroke-width: 2;
          fill: none !important;
        }
      }

      &.incoming {
        & > path:not(.hover-path) {
          stroke: var(--edge-incoming-color);
        }
        & > polygon {
          stroke: var(--edge-incoming-color);
          fill: var(--edge-incoming-color);
        }
      }
      &.outgoing {
        & > path:not(.hover-path) {
          stroke: var(--edge-outgoing-color);
        }
        & > polygon {
          stroke: var(--edge-outgoing-color);
          fill: var(--edge-outgoing-color);
        }
      }

      &.incoming.outgoing {
        & > path:not(.hover-path) {
          stroke: var(--edge-recursive-color);
        }
        & > polygon {
          stroke: var(--edge-recursive-color);
          fill: var(--edge-recursive-color);
        }
      }
    }

    .cluster {
      polygon {
        stroke {
          stroke-width: 2;
        }
      }

      rect {
        &:hover {
          cursor: pointer;
        }

        fill: lightgray;
        rx: 15;
      }

      text {
        pointer-events: none;
      }
    }

    .node {
      cursor: pointer;

      & > rect {
        rx: 20;
        fill: var(--node-color);
        filter: url(#shadow);
      }
      &.selected > rect {
        stroke: var(--node-seleted-color);
        stroke-width: 2.25;
      }

      text {
        fill: var(--node-content-color);
      }

      .title {
        pointer-events: none;

        & > text {
          font-weight: bold;
        }
      }
    }

    .cell {
      cursor: pointer;

      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;

      & > rect {
        fill: var(--node-color);
        stroke: black;
        stroke-width: 1.13;
      }

      &:not(.selected):hover > rect {
        stroke: var(--cell-hover-color);
        filter: url(#shadow);
      }
      &.selected > rect {
        stroke: var(--cell-selected-color);
      }
      &.highlight > rect:last-of-type {
        stroke-dasharray: 10, 3, 5, 3;
      }

      /* symbols */

      &:not(.type, .property) > rect {
        rx: 10;
      }

      &.module > rect {
        fill: var(--module-color);
      }

      &.interface {
        & > rect {
          fill: var(--interface-color);
          stroke-dasharray: 7, 5;
          stroke-width: 1.6;
        }
      }

      &.type {
        & > rect {
          fill: var(--type-color);
        }
        & > text {
          transform: translateY(1px);

          &:first-of-type {
            fill: var(--icon-color);
          }
        }
      }

      &.constructor > rect {
        fill: var(--constructor-color);
      }
      &.function > rect {
        fill: var(--function-color);
      }
      &.method > rect {
        fill: var(--method-color);
      }

      &:where(.field, .property) > text {
        font-weight: unset;
        font-style: italic;
        fill: var(--icon-color);
      }
    }
  }
}
